<?xml version="1.0" encoding="UTF-8"?>
<!--
<% ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ %>
<%   Copyright (c) 2011                                                                                               %>
<%   Michael Barbieri, Christopher Haines, James Pence, Dale Scheppler, Nicholas Skaggs, Stephen V. Williams          %>
<%   All rights reserved. This program and the accompanying materials                                                 %>
<%   are made available under the terms of the new BSD license                                                        %>
<%   which accompanies this distribution, and is available at                                                         %>
<%   http://www.opensource.org/licenses/bsd-license.html                                                              %>
<%																													  %>
<%   Contributors: Initial API and implementation                                                                     %>
<%       Michael Barbieri, Christopher Haines, James Pence, Dale Scheppler, Nicholas Skaggs, Stephen V. Williams      %>
-->

<config>

<!-- 
<% ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ %>
<% ===== JDBCFetch =====																							  %>
<% Gathers information from a database and places it within a given RecordHandler organized according to how the data %>
<% is arranged within the chosen database.                                                   						  %>
<% == Reason for use ==                                                                                               %>
<% Connection with different types of databases is essential to effectively populating a VIVO instance with viable    %>
<%     data. Java Database Connectivity is available and flexible, while allowing standard SQL queries to retrieve    %>
<%     the information from the chosen database.                                                                      %> 
<% ===== PARAMETERS =====                                                                                             %>
<%                                                                                                                    %>
<%  wordiness - (optional) sets the lowest level of log messages to be displayed to the console.  The lower the log   %>
<%          level, the more detailed the messages.                                                                    %>
<%      Possible Values:                                                                                              %>
<%          <wordiness>OFF</wordiness> - Results in no messages being displayed.                                      %>
<%          <wordiness>ERROR</wordiness> - Results in only messages from the ERROR level to be displayed.             %>
<%              Error messages detail when the tool has experienced an error preventing it from completing its task   %>
<%          <wordiness>WARN</wordiness> - Results in only messages above and including WARN level messages            %>
<%              to be displayed. Match does not produce any WARN level messages.                                      %>
<%          <wordiness>INFO</wordiness> - (Default) Results in all messages above and including INFO level            %>
<%              messages to be displayed. INFO level messages detail when the tool has started and ended and when it  %>
<%              begins/ends a phase ('Finding matches' and 'Beginning Rename of matches') and how many matches have   %>
<%              been found.                                                                                           %>
<%          <wordiness>DEBUG</wordiness> - Results in all messages above and including DEBUG level messages           %>
<%              to be displayed. DEBUG level messages detail each matching input URI to its VIVO URI as they are      %>
<%              processed. Additionally, it will display stacktrace information if an error occurs.                   %>
<%          <wordiness>ALL</Param> or TRACE<wordiness> - Results in all messages above and including TRACE            %>
<%              level messages to be displayed, since trace is the lowest level it is the same as ALL in practice.    %>
<%              TRACE level messages details every matching set as it is processed in each phase along with SPARQL    %>
<%              queries and start and stop for their execution.                                                       %>
<%                                                                                                                    %>
<%   JDBCFetch Spcific messages                                                                                       %>
<%                                                                                                                    %>
<%   Info:   The number of records added                                                                              %>
<%           The start of the run                                                                                     %>
<%           Command line usage                                                                                       %>
<%                                                                                                                    %>
<%   Debug:  Finding data column names for each table                                                                 %>
<%           Finding relation column names for each table                                                             %>
<%           Finding id column names for each table                                                                   %>
<%                                                                                                                    %>
<%   Trace:  All column names found                                                                                   %>
<%           Generated or user defined query                                                                          %>
<%           Each record being added                                                                                  %>
<%                                                                                                                    %>
<% The source relational database information:                                                                        %>
<%                                                                                                                    %>
<% <driver> - A JDBC driver is a java class which handles the interface between the program and a given database.     %>
<%     The driver needs to exist within the classpath, for the program to be able to use it.                          %>
<%     EXAMPLES:                                                                                                      %>
<%            <driver>org.h2.Driver</driver>                                                                          %>
<%                                                                                                                    %>
<% <connection> - JDBC uses a connection string related to the Driver being used.                                     %>
<%    It is in the general format "jdbc:somejdbcvendor:other data needed"                                             %>
<%    EXAMPLES :                                                                                                      %>
<%     Microsoft SQL server : <connection>jdbc:jtds:sqlserver://127.0.0.1:8080/databasename</connection>              %>
<%     H2 database ( http://www.h2database.com ) : <connection>jdbc:h2:directory/location</connection>                %>
<%                                                                                                                    %>
<% <username> - A valid login with proper permissions                                                                 %>
<% <password> - The associated secure password                                                                        %>
<%   These are what the fetch uses when accessing the given database. These must be valid otherwise the harvest run   %>
<%  will not have access to the database. By default we use "sa" for system administrator and a blank password.       %>                                                                                                                %>
<%                                                                                                                    %>
<% The database table information:                                                                                    %>
<%                                                                                                                    %>
<% <name> - Each table has an identifying name associated with it. These names are case sensitive and should be       %>
<%     checked several times before the first run.                                                                    %>
<%                                                                                                                    %>
<% <id> - To distinguish records from each other this should be a distinct non-null field. If such a field is not     %>
<%    available, the configuration supports forming a concatenation of several fields (aka a composite key). The      %>
<%    concatenation is used by supplying a comma separated list of field names rather than a single field name.       %>
<%                                                                                                                    %>
<% <query> - Within this tag is placed an SQL query which will be ran on the supplied database table. The names       %>
<%    attributed during this query will supply the names applied to the data within the record handler.               %>
<%                                                                                                                    %>
<%                                                                                                                    %>
-->
    <source>
    	<database>
			<driver>org.h2.Driver</driver>
			<connection>jdbc:h2:harvested-data/default/h2/store</connection>
			<username>sa</username>
			<password></password>
		</database>
<!-- 		<csv-file> -->
<!-- 			<file-path>/path/to/file.csv</file-path> -->
<!-- 		</csv-file> -->
    </source>
    <table>
        <name>people</name>
		<id>UID</id>
    	<query>
SELECT 
	emp.person_id AS UID, 
	emp.first_name AS FNAME, 
	emp.last_name AS LNAME, 
	emp.middle_name AS MNAME, 
	emp.prefix_name AS PRENAME, 
	emp.suffix_name AS SUFNAME, 
	emp.full_name AS FULLNAME, 
	emp.official_name AS BUSNAME, 
	emp.pref_title AS TITLE, 
	emp.email_address AS EMAIL, 
	emp.work_phone AS PHONE, 
	emp.work_fax AS FAX, 
	login.login_name AS NETID 
FROM person AS emp 
LEFT JOIN user AS login ON 
	emp.person_id = login.person_id AND login.expired = 0 
WHERE 
	emp.publish_ok = 1<!-- - -> AND 
	emp.person_id LIKE '%6%'<!- - -->
		</query>
    </table>
    <table name="positions">
    	<id>UID,TYPE,DEPTID,STARTDATE</id>
    	<query>
SELECT 
	emp.person_id AS UID, 
	pos.type_id AS TYPE, 
	pos.dept_id AS DEPTID, 
	pos.start_date AS STARTDATE, 
	code.value AS WORKTITLE 
FROM job AS pos 
INNER JOIN person AS emp ON 
	pos.person_id = emp.person_id 
INNER JOIN type AS code ON 
	pos.type_id = code.type_id 
WHERE 
	pos.type_id IN (121,122,254,392,393) AND 
	emp.publish_ok = 1<!-- - -> AND 
	emp.person_id LIKE '%6%'<!- - -->
    	</query>
    </table>
    <table name="organizations">
    	<id>DEPTID</id>
    	<query>
SELECT 
	dept.dept_id AS DEPTID, 
	dept.dept_name AS NAME, 
	dept.type_id AS TYPE, 
	dept.super_dept_id AS SUPERDEPTID 
FROM department AS dept
    	</query>
    </table>
</config>